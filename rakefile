# -*- ruby -*-
require 'rake/clean'
require 'rake/loaders/makefile'

DEFAULT_ZTARGET = 'msp'
ZTARGET = ENV.fetch('ZTARGET',DEFAULT_ZTARGET)
BUILD_DIR = "build/#{ZTARGET}"

platform_msp = {
    'CC'     =>'msp430-gcc', 
    'CFLAGS' =>' -Os -mmcu=msp430x1611 -mdisable-hwmul -nostdinc -nostdlib -fexpensive-optimizations -frename-registers -frerun-loop-opt -fstrength-reduce -pipe'
    }

platform_pc = {
    'CC'     => 'gcc',
    'CFLAGS' => ' -nostdlib -fexpensive-optimizations -frename-registers -frerun-loop-opt -fstrength-reduce -pipe'
}



platforms = {'msp'=>platform_msp, 'pc'=>platform_pc}

platform = platforms[ZTARGET]


CC = platform['CC']
CFLAGS = platform['CFLAGS']


DIR = ['.', 'lib', 'kernel']

INC = '-Iinclude -Ihardware/mcu/include'
SRC = FileList[ DIR.each{ |d| d << '/*.c' } ]
SRC2OBJ = {}
SRC.each do |x|
    SRC2OBJ[x] = x.pathmap("#{BUILD_DIR}/%X.o")
    #SRC2OBJ[x] = x.ext("o")
end
OBJ2SRC = SRC2OBJ.invert
if OBJ2SRC.length != SRC2OBJ.length
    exit
end
#OBJ = SRC.clone().pathmap("#{BUILD_DIR}/%X.o")
CLEAN.include(SRC2OBJ.values).include(".depends.mf")

#print SRC, "\n"
#print OBJ, "\n"

rule( /\.o$/ => [ proc {|task_name| OBJ2SRC[task_name]} ]) do |t|
    sh "#{CC} #{CFLAGS} #{INC} -c -o #{t.name} #{t.source}"
end

file ".depends.mf" => SRC do |t|
    sh "echo > #{t.name}"
    SRC2OBJ.each_pair do |src,obj|
        print src, ' -----> ', obj, "\n"
        sh "#{CC} -MM -MG -MT #{obj} #{INC} #{src}  >> #{t.name}"
    end
end

import ".depends.mf" 

file "rakefile" => [".depends.mf"]


task :dep => ".depends.mf"
task :all => SRC2OBJ.values + [:dep]
task :default => :all

